{"version":3,"sources":["Shape.ts","context.ts","Circle.ts","Mouse.ts","ScreenText.ts","Player.ts","Playground.ts","app.ts"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"..","sourcesContent":["import { Context } from './context';\nimport { IPoint } from './IPoint';\nimport { ISpeed } from './ISpeed';\n\nexport class Shape {\n  position: IPoint;\n  width: number;\n  height: number;\n  speed: ISpeed;\n  fill: string;\n  context: Context\n\n  constructor(width: number, height: number, fill: string, ctx: Context) {\n    this.position = {x: 0, y: 0};\n    this.width = width;\n    this.height = height;\n    this.fill = fill;\n    this.context = ctx;\n  }\n\n  Positon(position: IPoint): void {\n    this.position.x = position.x; this.position.y = position.y;\n  }\n\n  Move(speed: ISpeed = null): void {\n    if(speed !== null) {\n      this.speed = speed;\n    }\n    this.position.x = this.position.x + this.speed.SpeedX;\n    this.position.y = this.position.y + this.speed.SpeedY;\n    this.Draw();\n  }\n\n  Draw(): void {\n    this.context._2d.fillStyle = this.fill;\n    this.context._2d.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  Reset(): void {\n    console.log(\"reset\");\n    //this.Move(-this.position.x, -this.position.y)\n    this.position.x = this.context.canvas.width / 2;\n    this.position.y = this.context.canvas.height / 2;\n  }\n}\n","export class Context {\r\n  canvas: HTMLCanvasElement;\r\n  _2d: CanvasRenderingContext2D;\r\n\r\n  constructor(canvas: Canvas) {\r\n    this.canvas = canvas.element;\r\n    this._2d = canvas.element.getContext('2d');\r\n  }\r\n};\r\n\r\nexport class Canvas {\r\n  element: HTMLCanvasElement;\r\n  width: number;\r\n  height: number;\r\n\r\n  constructor(canvasID: string, canvasWidth: number, canvasHeight: number) {\r\n    this.element = <HTMLCanvasElement>document.getElementById(canvasID);\r\n    this.element.width = canvasWidth;\r\n    this.element.height = canvasHeight;\r\n    this.width = canvasWidth;\r\n    this.height = canvasHeight;\r\n  }\r\n}","import { Shape } from \"./Shape\";\n\nexport class Circle extends Shape {\n  Draw(): void {\n    this.context._2d.fillStyle = this.fill;\n    this.context._2d.beginPath();\n    this.context._2d.arc(this.position.x, this.position.y, 10, 0, Math.PI*2, true);\n    this.context._2d.fill();\n  }\n}\n","import { Context, Canvas } from \"./context\";\nimport { IPoint } from \"./IPoint\";\n\nexport class Mouse {\n  canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  CurrentPosition(event: MouseEvent): IPoint {\n    var rect: ClientRect | DOMRect = this.canvas.element.getBoundingClientRect();\n    var root: HTMLElement = document.documentElement;\n    var mouseX = event.clientX - rect.left - root.scrollLeft;\n    var mouseY = event.clientY - rect.top - root.scrollTop;\n    return {x: mouseX, y: mouseY};\n  }\n}\n","import { Context } from \"./context\";\nimport { IPoint } from \"./IPoint\";\n\nexport class ScreenText {\n    text: string;\n    context: Context;\n    position: IPoint;\n\n    constructor(text: string, position: IPoint, context: Context) {\n        this.text = text;\n        this.position = position;\n        this.context = context;\n    }\n\n    Draw() {\n        this.context._2d.fillText(this.text, this.position.x, this.position.y);\n    }\n}\n","export class Player {\n\n    constructor(private score: number = 0) {\n        this.score = score;\n    }\n\n    ScoreAdd(score: number): void {\n        this.score += score;\n    }\n\n    ScoreGet(): number {\n        return this.score;\n    }\n\n    ScoreReset(limit: number): void {\n        if(this.score === limit) {\n            this.score = 0;\n        }\n    }\n}\n","import { Context } from \"./context\";\nimport { Shape } from \"./Shape\";\nimport { ISpeed } from \"./ISpeed\";\n\nexport class Playground {\n    shapeList: Shape[] = [];\n\n\n    constructor(private context: Context) {}\n\n    AddShape(shape: Shape): void {\n        this.shapeList.push(shape);\n    }\n\n    CrasNotify(): void {\n        for(let shape of this.shapeList) {\n            this.crash(shape);\n        }\n    }\n    \n\n    private crash(shape: Shape) {\n        this.crashRightWall(shape);\n        this.crashFloor(shape);\n        this.crashLeftWall(shape);        \n        this.crashTop(shape);\n    }\n\n    private noCrash(shape: Shape): ISpeed {\n        return { SpeedX: shape.speed.SpeedX, SpeedY: shape.speed.SpeedY };\n    }\n\n    private crashRightWall(shape): void {\n        if(shape.position.x >= this.context.canvas.width) {\n            shape.Move({ SpeedX: -shape.speed.SpeedX , SpeedY: shape.speed.SpeedY });\n          }\n    }\n\n    private crashLeftWall(shape: Shape): void {\n        if(shape.position.x <= 0) {\n            shape.Move({ SpeedX: -shape.speed.SpeedX , SpeedY: shape.speed.SpeedY });\n            //shape.Reset();\n        }\n    }\n\n    private crashFloor(shape: Shape) {\n        if(shape.position.y >= this.context.canvas.height) {\n            shape.Move( { SpeedX: shape.speed.SpeedX, SpeedY: -shape.speed.SpeedY } );\n        }\n    }\n\n    private crashTop(shape: Shape) {\n        if(shape.position.y <= 0) {\n            shape.Move({ SpeedX: shape.speed.SpeedX, SpeedY: -shape.speed.SpeedY });\n        }\n    }\n}\n","import { Shape } from \"./Shape\";\r\nimport { Context, Canvas } from \"./context\";\r\nimport { Circle } from \"./Circle\";\r\nimport { Mouse } from \"./Mouse\";\r\nimport { IPoint } from \"./IPoint\";\r\nimport { ScreenText } from \"./ScreenText\";\r\nimport { Player } from \"./Player\";\r\nimport { Playground } from \"./Playground\";\r\n\r\nconst cl = console.log;\r\n\r\nif(false) {\r\n  console.log = () => {};\r\n}\r\n\r\nconst PADDLE_HEIGHT = 100;\r\nconst PADDLE_THICKNESS = 20;\r\n\r\nlet player1 = new Player(0);\r\nlet player2 = new Player(0);\r\n\r\nconst WINNING_SCORE = 3;\r\n\r\nvar ballX: number = 100;\r\nvar ballSpeedX: number = 8;\r\nvar ballY: number = 100;\r\nvar ballSpeedY: number = 4;\r\n\r\nconst canvas = new Canvas(\"gameCanvas\", 800, 600);\r\nlet context = new Context(canvas);\r\nlet mouse = new Mouse(canvas);\r\n\r\nfunction calculateMousePosition(evt: any): {x: number, y: number} {\r\n  var rect: ClientRect | DOMRect = canvas.element.getBoundingClientRect();\r\n  var root: HTMLElement = document.documentElement;\r\n  var mouseX = evt.clientX - rect.left - root.scrollLeft;\r\n  var mouseY = evt.clientY - rect.top - root.scrollTop;\r\n  return {x: mouseX, y: mouseY};\r\n}\r\n\r\nvar paddle1Y = 200;\r\nvar paddle2Y = 200;\r\n\r\nlet playgrund = new Playground(context);\r\n\r\nlet player1Score = new ScreenText(player1.ScoreGet().toString(), { x: 100, y: 100 }, context);\r\nlet player2Score = new ScreenText(player2.ScoreGet().toString(), { x: canvas.width - 100, y: 100}, context);\r\n\r\nwindow.onload = function() {\r\n  \r\n\r\n  let rectagle = new Shape(10, 10, \"white\", context);\r\n  rectagle.Positon({ x: ballX, y: 200 });\r\n\r\n  let ball = new Circle(10, 10, \"red\", context);\r\n  ball.Positon({ x: 0, y: 150 });\r\n  ball.Move({ SpeedX: ballSpeedX, SpeedY: ballSpeedY });\r\n\r\n  playgrund.AddShape(ball);\r\n\r\n  var framesPerSecond: number = 30;\r\n  setInterval(function() {\r\n    drawEverything(canvas, context, ball);\r\n    //playgrund.CrasNotify();\r\n    moveEverything(canvas, ball);\r\n  }, 1000 / framesPerSecond);\r\n\r\n  canvas.element.addEventListener(\"mousemove\", (event: MouseEvent) => {\r\n    var mousePos: IPoint = mouse.CurrentPosition(event);\r\n    paddle1Y = mousePos.y - (PADDLE_HEIGHT / 2);\r\n  })\r\n}\r\n\r\nfunction computerMovement(ball: Shape) {\r\n  var paddle2YCenter = paddle2Y + (PADDLE_HEIGHT / 2);\r\n  if(paddle2YCenter < ball.position.y -35) {\r\n    paddle2Y += 6;\r\n  }\r\n  else if(paddle2YCenter > ball.position.y +35) {\r\n    paddle2Y -= 6;\r\n  }\r\n}\r\n\r\nfunction moveEverything(canvas: Canvas, ball: Shape): void {\r\n  computerMovement(ball);\r\n\r\n  if(ball.position.x >= canvas.width) {\r\n    if(ball.position.y > paddle2Y && ball.position.y < paddle2Y + PADDLE_HEIGHT) {\r\n      //ball.Move({ SpeedX: -ball.speed.SpeedX , SpeedY: ball.speed.SpeedY });\r\n      var deltaY = ball.position.y - ( paddle2Y + PADDLE_HEIGHT/2 );\r\n      ball.Move({ SpeedX: -ball.speed.SpeedX , SpeedY: deltaY * 0.3 });\r\n    }\r\n    else\r\n    {\r\n      player1.ScoreAdd(1);\r\n      player1.ScoreReset(4);\r\n      ball.Reset();\r\n    }\r\n  }\r\n\r\n  if(ball.position.x <= 0) {\r\n    if(ball.position.y > paddle1Y && ball.position.y < paddle1Y + PADDLE_HEIGHT) {\r\n      //ball.Move({ SpeedX: -ball.speed.SpeedX , SpeedY: ball.speed.SpeedY });\r\n      var deltaY = ball.position.y - ( paddle1Y + PADDLE_HEIGHT/2 );\r\n      ball.Move({ SpeedX: -ball.speed.SpeedX , SpeedY: deltaY * 0.3 });\r\n    }\r\n    else\r\n    {\r\n      player2.ScoreAdd(1);\r\n      player2.ScoreReset(4);\r\n      ball.Reset();\r\n    }\r\n  }\r\n\r\n  if(ball.position.y >= canvas.height) {\r\n    ball.Move({ SpeedX: ball.speed.SpeedX, SpeedY: -ball.speed.SpeedY });\r\n  }\r\n\r\n  if(ball.position.y <= 0) {\r\n    ball.Move({ SpeedX: ball.speed.SpeedX, SpeedY: -ball.speed.SpeedY });\r\n  }\r\n}\r\n\r\n\r\nfunction drawEverything(canvas: Canvas, context: Context, ball: Shape): void {\r\n  const background = new Shape(canvas.width, canvas.height, \"black\", context);\r\n  background.Draw();\r\n\r\n  // this is player paddle\r\n  let paddleLeft = new Shape(PADDLE_THICKNESS, PADDLE_HEIGHT, \"red\", context);\r\n  paddleLeft.Positon({ x: 0, y: paddle1Y });\r\n  paddleLeft.Draw();\r\n\r\n  // this is computer paddle\r\n  let paddleRight = new Shape(PADDLE_THICKNESS, PADDLE_HEIGHT, \"red\", context);\r\n  paddleRight.Positon({ x: canvas.width - PADDLE_THICKNESS, y: paddle2Y });\r\n  paddleRight.Draw();\r\n\r\n  // player score\r\n  let player1Score = new ScreenText(player1.ScoreGet().toString() + \" pont\", { x: 100, y: 100 }, context);\r\n  let player2Score = new ScreenText(player2.ScoreGet().toString() + \" pont\", { x: canvas.width - 100, y: 100}, context);\r\n\r\n  player1Score.Draw();\r\n  player2Score.Draw();\r\n\r\n  // ball\r\n  ball.Move();\r\n}\r\n"]}